{
    "contents" : "# Solving Optimization Problems in R\n\n# In this script file, we show how the airline revenue management problems discussed in this lecture can be solved in R using the \"lpSolveAPI\" package. This package allows you to solve linear optimization problems in R using the lp_solve library, which is an open-sourced optimization solver. \n\n# If you are solving larger and more complex optimization problems, lp_solve might not be powerful enough to solve your problems. There are other optimization packages available in R that rely on commercial solvers, such as cplexAPI and Rcplex. For more information, see the CRAN Optimization page: http://cran.us.r-project.org/web/views/Optimization.html\n\n\n# First, you need to install and load the lpSolveAPI package:\n\ninstall.packages(\"lpSolveAPI\")\nlibrary(lpSolveAPI)\n\n# Now let's start by solving the simple airline problem with just two decision variables: the number of regular seats to offer, and the number of discount seats to offer. \n\n#The first step is to create a model, which takes as arguments the number of constraints in your model, and the number of decision variables in your model. We have three constraints (one capacity constraint and two demand constraints) and two decision variables.\n\nAirlineSimple = make.lp(3,2)\n\n# Now we need to set up the constraints and objective. The best way to do this using the lpSolveAPI package is by viewing the constraints in a matrix format. Our objective and three constraints are as follows:\n# max         617*R + 238*D\n# subject to    1*R +   1*D <= 166\n#               1*R\t+   0*D <= 100\n#               0*R +   1*D <= 150\t\n\n# So the first column in our constraint matrix is c(1,1,0), and the second column in our constraint matrix is c(1,0,1). We also need to indicate that these are less-than-or-equal constraints, and set the right-hand-side values to c(166,100,150):\n\nset.column(AirlineSimple, 1, c(1,1,0))\nset.column(AirlineSimple, 2, c(1,0,1))\nset.constr.type(AirlineSimple, c(\"<=\",\"<=\",\"<=\"))\nset.rhs(AirlineSimple, c(166,100,150))\n\n# And our objective coefficients are c(617,238):\n\nset.objfn(AirlineSimple, c(617,238))\n\n# The default setting is minimize for the objective, so we need to tell R that we are maximizing our objective:\n\nlp.control(AirlineSimple,sense='max')\n\n# If we want to take a look at our model, we can just type:\n\nAirlineSimple\n\n# You should see that there is a row called \"Lower\" in the model output - the values of zero indicate that our decision variables are constrained to be non-negative, which is the default setting. If you want to change the lower or upper bounds for a decision variable, you can do so with the set.bounds function. (Next week we will learn about integer and binary decision variables - to change a decision variable to one of these types, you can use the set.type function.)\n\n# Now we are ready to solve our model:\n\nsolve(AirlineSimple)\n\n# An output of zero means that the model was successfully solved. You can look at the optimal objective function value or optimal decision variable values with get.objective and get.variables:\n\nget.objective(AirlineSimple)\nget.variables(AirlineSimple)\n\n# You should get an objective value of 77408 and decision variable values of 100 and 66, just like we did in lecture.\n\n# The following commands set up and solve the more sophisticated airline problem with six decision variables:\n\nAirlineConnecting = make.lp(8,6)\n\nset.column(AirlineConnecting, 1, c(1,1,1,0,0,0,0,0))\nset.column(AirlineConnecting, 2, c(1,1,0,1,0,0,0,0))\nset.column(AirlineConnecting, 3, c(1,0,0,0,1,0,0,0))\nset.column(AirlineConnecting, 4, c(1,0,0,0,0,1,0,0))\nset.column(AirlineConnecting, 5, c(0,1,0,0,0,0,1,0))\nset.column(AirlineConnecting, 6, c(0,1,0,0,0,0,0,1))\nset.constr.type(AirlineConnecting, rep(\"<=\",8))\nset.rhs(AirlineConnecting, c(166,166,80,120,75,100,60,110))\n\nset.objfn(AirlineConnecting, c(428,190,642,224,512,190))\nlp.control(AirlineConnecting,sense='max')\n\nsolve(AirlineConnecting)\nget.objective(AirlineConnecting)\nget.variables(AirlineConnecting)\n\n# You should get an objective function value of 120514 and decision variable values of 80, 0, 75, 11, 60, 26.\n\n# For additional examples, we direct you to the lpSolveAPI User's Guide:\nhttp://www.icesi.edu.co/CRAN/web/packages/lpSolveAPI/vignettes/lpSolveAPI.pdf\n\n\n\n",
    "created" : 1438856073132.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1526924023",
    "id" : "87D92FA1",
    "lastKnownWriteTime" : 1438856058,
    "path" : "C:/Users/Fagui/Downloads/Unit8_AirlineRM.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}