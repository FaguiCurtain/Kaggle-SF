source('~/coursera/Analytics Edge/Kaggle_new.R')
bidTrain
str(bidTrain)
source('~/coursera/Analytics Edge/Kaggle_new.R')
source('~/coursera/Analytics Edge/Kaggle_new.R')
source('~/coursera/Analytics Edge/Kaggle_new.R')
str(bidTrainLR)
source('~/coursera/Analytics Edge/Kaggle_new.R')
LogBid
summary(LogBid)
summary(bidTrainLR)
summary(bidTrainLR$biddable)
source('~/coursera/Analytics Edge/Kaggle_new.R')
source('~/coursera/Analytics Edge/Kaggle_new.R')
summary(LogBid)
source('~/coursera/Analytics Edge/Kaggle_new.R')
source('~/coursera/Analytics Edge/Kaggle_new.R')
source('~/coursera/Analytics Edge/Kaggle_new.R')
source('~/coursera/Analytics Edge/Kaggle_new.R')
str(nobidTrain)
str(nobidTrainLR)
source('~/coursera/Analytics Edge/Kaggle_new.R')
summary(LogBid)
source('~/coursera/Analytics Edge/Kaggle_new.R')
source('~/coursera/Analytics Edge/Kaggle_new.R')
source('~/coursera/Analytics Edge/Kaggle_new.R')
source('~/coursera/Analytics Edge/Kaggle_new.R')
str(nobidTrain)
source('~/coursera/Analytics Edge/Kaggle_new.R')
str(nobidTrain)
source('~/coursera/Analytics Edge/Kaggle_new.R')
source('~/coursera/Analytics Edge/Kaggle_new.R')
summary(LognoBid)
source('~/coursera/Analytics Edge/Kaggle_new.R')
source('~/coursera/Analytics Edge/Kaggle_new.R')
source('~/coursera/Analytics Edge/Kaggle_new.R')
source('~/coursera/Analytics Edge/Kaggle_new.R')
summary(LogBid)
source('~/coursera/Analytics Edge/Kaggle_new.R')
summary(LogBid)
summary(LognoBid)
str(bidTrain)
(70+88)/2
table(nobidTrain$sold)
(800)/1017
predbase <- rep(0,817)
source('~/coursera/Analytics Edge/Kaggle_new.R')
str(nobidTrain$sold)
source('~/coursera/Analytics Edge/Kaggle_new.R')
summary(eBayTrain$biddable)
summary(eBayTest$biddable)
source('~/coursera/Analytics Edge/Kaggle_new.R')
?combisub
source('~/coursera/Analytics Edge/Kaggle_new.R')
source('~/coursera/Analytics Edge/Kaggle_new.R')
source('~/coursera/Analytics Edge/Kaggle_new.R')
str(eBayTest)
source('~/coursera/Analytics Edge/Kaggle_new.R')
source('~/coursera/Analytics Edge/Kaggle_new.R')
ans
source('~/coursera/Analytics Edge/Kaggle_new.R')
check <- read.csv("submission.csv")
tail(check)
str(bidTest)
source('~/coursera/Analytics Edge/Kaggle_new.R')
source('~/coursera/Analytics Edge/Kaggle_new.R')
ans
check <- read.csv("submission.csv")
tail(check)
predLR_noBid
source('~/coursera/Analytics Edge/Kaggle_new.R')
summary(LogBid)
summary(LognoBid)
u <- as.data.frame(rbind(cbind(bidTrain$uniqueID,bidTrain$price_index),cbind(nobidTrain$uniqueID,nobidTrain$price_index)))
u
str(unclass)
str(u)
cbind(bidTrain$uniqueID,bidTrain$price_index)
bidTrain$UniqueID
bidTrain$price_index
cbind(bidTrain$uniqueID,bidTrain$price_index)
temp <- rbind(bidTrain,nobidTrain)
str(temp)
temp$UniqueID
eBayTrain2 <- rbind(bidTrain,nobidTrain)
str(eBayTrain2)
eBayTrain2 <- eBayTrain2[order(eBayTrain2[,9]),]
str(eBayTrain2)
str(eBayTrain1)
source('~/coursera/Analytics Edge/Kaggle_new.R')
source('~/coursera/Analytics Edge/Kaggle_new.R')
summary(LogReg)
source('~/coursera/Analytics Edge/Kaggle_new.R')
summary(LogReg)
LogReg <- glm(sold~. biddable+condition+productline+storage+price_index+carrier+cellular,data=eBayTrain2,family="binomial")
LogReg <- glm(sold~biddable+condition+productline+storage+price_index+carrier+cellular,data=eBayTrain2,family="binomial")
summary(LogReg)
LogReg <- glm(sold~biddable+condition+productline+storage+price_index+carrier,data=eBayTrain2,family="binomial")
summary(LogReg)
LogReg <- glm(sold~biddable+condition+productline+storage+price_index,data=eBayTrain2,family="binomial")
summary(LogReg)
LogReg <- glm(sold~biddable+condition+productline+storage+price_index+carrier,data=eBayTrain2,family="binomial")
summary(LogReg)
LogReg <- glm(sold~biddable+condition+productline+storage+price_index+carrier,data=eBayTrain2,family="binomial")
predLR <- predict(LogReg,type="response")
ROCRpred = prediction(predLR, eBayTrain2$sold)
print("LogReg AUC for the whole set")
print(as.numeric(performance(ROCRpred, "auc")@y.values))
## randomForest on whole set
set.seed(456)
eBayForest = randomForest(sold ~ .-UniqueID, data = eBayTrain2, ntree=200, nodesize=10 )
# Make predictions
PredForest = predict(eBayForest,type="prob")[,2]
# Train set AUC
print("Train set AUC for Random Forest")
ROCRpred = prediction(PredForest, eBayTrain2$sold)
print(as.numeric(performance(ROCRpred, "auc")@y.values))
str(eBayTrain2)
## randomForest on whole set
set.seed(456)
# necessary for RandomForest
eBayTrain2$sold <- factor(eBayTrain2$sold)
eBayForest = randomForest(sold ~ .-UniqueID, data = eBayTrain2, ntree=200, nodesize=10 )
# Make predictions
PredForest = predict(eBayForest,type="prob")[,2]
# Train set AUC
print("Train set AUC for Random Forest")
ROCRpred = prediction(PredForest, eBayTrain2$sold)
print(as.numeric(performance(ROCRpred, "auc")@y.values))
eBayForest$importance
str(bidTrain)
source('~/coursera/Analytics Edge/Kaggle_new.R')
str(bidTrain)
bidForest <- randomForest(sold ~ .-UniqueID, data = bidTrain, ntree=200, nodesize=10 )
PredbidTrainForest = predict(bidTrain,type="prob")[,2]
source('~/coursera/Analytics Edge/Kaggle_new.R')
####### randomForest with bid/nobid subsets #######
set.seed(456)
# necessary for RandomForest
bidTrain$sold <- factor(bidTrain$sold)
nobidTrain$sold <- factor(nobidTrain$sold)
#biddable subset
bidForest <- randomForest(sold ~ .-UniqueID, data = bidTrain, ntree=200, nodesize=10 )
PredbidTrainForest = predict(bidForest,type="prob")[,2]
print("bidTrain subset AUC for Random Forest")
ROCRpred = prediction(PredbidTrainForest, bidTrain$sold)
print(as.numeric(performance(ROCRpred, "auc")@y.values))
#
#non biddable subset
nobidForest <- randomForest(sold ~ .-UniqueID, data = nobidTrain, ntree=200, nodesize=10 )
PrednobidTrainForest = predict(nobidForest,type="prob")[,2]
print("nobidTrain subset AUC for Random Forest")
ROCRpred = prediction(PrednobidTrainForest, nobidTrain$sold)
print(as.numeric(performance(ROCRpred, "auc")@y.values))
#
# combining the 2 sets
temp1 <- cbind(bidTrain$UniqueID,as.numeric(PredbidTrainForest))
temp2 <- cbind(nobidTrain$UniqueID,as.numeric(PrednobidTrainForest))
temp <- rbind(temp1,temp2)
ans <- temp[order(temp[,1]),]
remove(temp1); remove(temp2);remove(temp)
print("whole Train set AUC for Random Forest")
ROCRpred = prediction(ans[,2], eBayTrain1$sold)
print(as.numeric(performance(ROCRpred, "auc")@y.values))
## CART with cross-validation on the whole set
set.seed(123)
# Number of folds
tr.control = trainControl(method = "cv", number = 10)
# cp values
cp.grid = expand.grid( .cp = seq(0.01,0.5,0.01))
# Cross-validation
tr = train(sold ~ . -UniqueID, data = eBayTrain2, method = "rpart", trControl = tr.control, tuneGrid = cp.grid,minbucket=10)
# Extract tree
best.tree = tr$finalModel
prp(best.tree)
eBayTree_CV <- rpart(sold ~ . -UniqueID, data = eBayTrain2,method="class", cp = 0.06, minbucket=10)
best.tree.pred = predict(best.tree)
print("Train set AUC for CART with CV")
ROCRpred = prediction(best.tree.pred, eBayTrain2$sold)
print(as.numeric(performance(ROCRpred, "auc")@y.values))
library(caret)
library(e1071)
## CART with cross-validation on the whole set
set.seed(123)
# Number of folds
tr.control = trainControl(method = "cv", number = 10)
# cp values
cp.grid = expand.grid( .cp = seq(0.01,0.5,0.01))
# Cross-validation
tr = train(sold ~ . -UniqueID, data = eBayTrain2, method = "rpart", trControl = tr.control, tuneGrid = cp.grid,minbucket=10)
# Extract tree
best.tree = tr$finalModel
prp(best.tree)
eBayTree_CV <- rpart(sold ~ . -UniqueID, data = eBayTrain2,method="class", cp = 0.06, minbucket=10)
best.tree.pred = predict(best.tree)
print("Train set AUC for CART with CV")
ROCRpred = prediction(best.tree.pred, eBayTrain2$sold)
print(as.numeric(performance(ROCRpred, "auc")@y.values))
tr
eBayTree_CV <- rpart(sold ~ . -UniqueID, data = eBayTrain2,method="class", cp = 0.01, minbucket=10)
best.tree.pred = predict(best.tree)
print("Train set AUC for CART with CV")
ROCRpred = prediction(best.tree.pred, eBayTrain2$sold)
print(as.numeric(performance(ROCRpred, "auc")@y.values))
set.seed(123)
# Number of folds
tr.control = trainControl(method = "cv", number = 10)
# cp values
cp.grid = expand.grid( .cp = seq(0.01,0.5,0.01))
# Cross-validation
tr = train(sold ~ . -UniqueID, data = eBayTrain2, method = "rpart", trControl = tr.control, tuneGrid = cp.grid,minbucket=10)
# Extract tree
best.tree = tr$finalModel
prp(best.tree)
eBayTree_CV <- rpart(sold ~ . -UniqueID, data = eBayTrain2,method="class", cp = 0.01, minbucket=10)
best.tree.pred = predict(best.tree)
print("Train set AUC for CART with CV")
ROCRpred = prediction(best.tree.pred, eBayTrain2$sold)
print(as.numeric(performance(ROCRpred, "auc")@y.values))
LogReg <- glm(sold~biddable+condition+productline+storage+price_index+carrier,data=eBayTrain2,family="binomial")
predLR <- predict(LogReg,type="response")
ROCRpred = prediction(predLR, eBayTrain2$sold)
print("LogReg AUC for the whole set")
print(as.numeric(performance(ROCRpred, "auc")@y.values))
str(eBayTrain2)
eBayTrain2$condition <- as.integer(eBayTrain2$condition)
LogReg <- glm(sold~biddable+condition+productline+storage+price_index+carrier,data=eBayTrain2,family="binomial")
predLR <- predict(LogReg,type="response")
ROCRpred = prediction(predLR, eBayTrain2$sold)
print("LogReg AUC for the whole set")
print(as.numeric(performance(ROCRpred, "auc")@y.values))
source('~/coursera/Analytics Edge/Kaggle_new1.R')
str(eBayTrain2)
source('~/coursera/Analytics Edge/Kaggle_new1.R')
str(eBayTrain2)
source('~/coursera/Analytics Edge/Kaggle_new1.R')
tr
predict(best.tree)
eBayTrain2$sold
ROCRpred = prediction(best.tree.pred, eBayTrain2$sold)
predict(best.tree)
best.tree.pred = predict(best.tree)[,2]
print("Train set AUC for CART with CV")
ROCRpred = prediction(best.tree.pred, eBayTrain2$sold)
print(as.numeric(performance(ROCRpred, "auc")@y.values))
predict(eBayTree_CV)
## CART with cross-validation on the whole set
set.seed(123)
# Number of folds
tr.control = trainControl(method = "cv", number = 10)
# cp values
cp.grid = expand.grid( .cp = seq(0.01,0.5,0.01))
# Cross-validation
tr = train(sold ~ . -UniqueID, data = eBayTrain2, method = "rpart", trControl = tr.control, tuneGrid = cp.grid,minbucket=10)
# Extract tree
best.tree = tr$finalModel
prp(best.tree)
eBayTree_CV <- rpart(sold ~ . -UniqueID, data = eBayTrain2,method="class", cp = 0.01, minbucket=10)
best.tree.pred = predict(best.tree)[,2]
#best.tree.pred = predict(eBayTree_CV)
print("Train set AUC for CART with CV")
ROCRpred = prediction(best.tree.pred, eBayTrain2$sold)
print(as.numeric(performance(ROCRpred, "auc")@y.values))
source('~/coursera/Analytics Edge/Kaggle_new1.R')
source('~/coursera/Analytics Edge/Kaggle_new1.R')
source('~/coursera/Analytics Edge/Kaggle_new1.R')
source('~/coursera/Analytics Edge/Kaggle_new1.R')
str(eBayTrain_des)
eBayTrain2$description
str(eBayTrain2)
str(eBayTrain1)
source('~/coursera/Analytics Edge/Kaggle_new1.R')
summary(LogReg3)
predLR3 <- predict(LogReg3,type="response")
ROCRpred = prediction(predLR3, eBayTrain3$sold)
print("LogReg3 AUC for the whole set")
print(as.numeric(performance(ROCRpred, "auc")@y.values))
source('~/coursera/Analytics Edge/Kaggle_new1.R')
summary(LogReg3)
LogReg3 <- glm(sold~biddable+condition+productline+price_index+Dgood+Dscratch+Dscreen+Dwork+Dipad+Dcrack,data=eBayTrain3,family="binomial")
predLR3 <- predict(LogReg3,type="response")
ROCRpred = prediction(predLR3, eBayTrain3$sold)
print("LogReg3 AUC for the whole set")
print(as.numeric(performance(ROCRpred, "auc")@y.values))
LogReg3 <- glm(sold~. - UniqueID,data=eBayTrain3,family="binomial")
# LogReg3 <- glm(sold~biddable+condition+productline+price_index+Dgood+Dscratch+Dscreen+Dwork+Dipad+Dcrack,data=eBayTrain3,family="binomial")
predLR3 <- predict(LogReg3,type="response")
ROCRpred = prediction(predLR3, eBayTrain3$sold)
print("LogReg3 AUC for the whole set")
print(as.numeric(performance(ROCRpred, "auc")@y.values))
source('~/coursera/Analytics Edge/Kaggle_MIT.R')
source('~/coursera/Analytics Edge/Kaggle_MIT1.R')
Movies <- read.csv("Movies.csv")
str(Movies)
MoviesTrain <- subset(Movies,Year<2010)
MoviesTest <- subset(Movies,Year>=2010)
LR <- lm(Worldwide~.,data=MoviesTrain[ , 3:ncol(MoviesTrain)])
LR
summary(LR)
cor(training)
?cor
cor(MoviesTrain)
cor(MoviesTrain$Worldwide,MoviesTrain$Production.Budget)
LR <- lm(Worldwide~RunTime+Crime+Horror+Animation+History+Nominations+Production.Budget,data=MoviesTrain)
LR <- lm(Worldwide~Runtime+Crime+Horror+Animation+History+Nominations+Production.Budget,data=MoviesTrain)
summary(LR)
summary(MoviesTrain$Runtime)
pred <- predict(LR,newdata=MoviesTest)
baseline <- mean(MoviesTrain)
baseline <- mean(MoviesTrain$Worldwide)
baseline
SSE <- sum((pred-MoviesTest$Worldwide)^2)
SSE
SST <- sum((baseline-MoviesTest$Worldwide)^2)
SST
R2 = 1 - SSE/SST
R2
Movies$Performance = factor(ifelse(Movies$Worldwide > quantile(Movies$Worldwide, .75), "Excellent", ifelse(Movies$Worldwide > quantile(Movies$Worldwide, .25), "Average", "Poor")))
summary(Movies$Performance)
Movies$Worldwide = NULL
set.seed(15071)
split = sample.split(Movies$Performance, SplitRatio = 0.7)
library(caTools)
split = sample.split(Movies$Performance, SplitRatio = 0.7)
MoviesTrain <- subset(Movies,split==TRUE)
MoviesTest <- subset(Movies,split==FALSE)
CART <- rpart(Performance~.,data=MoviesTrain[ , 3:ncol(MoviesTrain)])
library(rpart)
CART <- rpart(Performance~.,data=MoviesTrain[ , 3:ncol(MoviesTrain)])
prp(CART)
library(rpart.plot)
prp(CART)
pred <- predict(CART)
pred
pred <- predict(CART,type="response"
)
pred
pred <- predict(CART,type="response")
pred <- predict(CART,type="class")
pred
CM <- table(MoviesTrain$Performance,pred)
CM
(96+41+46)/nrow(MoviesTrain)
summary(Performance)
summary(MoviesTrain$Performance)
116/nrow(MoviesTrain)
pred <- predict(CART,newdata=MoviesTest,type="class")
CM <- table(MoviesTest$Performance,pred)
CM
(36+16+16)/nrow(MoviesTest)
summary(MoviesTest$Performance)
fedFunds <- read.csv("federalFundsRate.csv",stringsAsFactors=FALSE)
head(fedFunds)
tail(fedFunds)
summary(fedFunds$RaisedFedFunds)
Raise <- subset(fedFunds,RaisedFedFunds==1)
table(Raise$Chairman)
table(fedFunds$Chairman
)
fedFunds$Chairman <- as.factor(fedFunds$Chairman)
fedFunds$DemocraticPres <- as.factor(fedFunds$DemocraticPres)
fedFunds$RaisedFedFunds <- as.factor(fedFunds$RaisedFedFunds)
fedFunds
str(fedFunds)
set.seed(201)
library(caTools)
spl = sample.split(fedFunds$RaisedFedFunds, 0.7)
LogReg <- glm(RaisedFedFunds~PreviousRate+Streak+Unemployment+HomeownershipRate+DemocraticPres+MonthsUntilElection,data=)
train <- subset(fedFunds,spl==TRUE)
LogReg <- glm(RaisedFedFunds~PreviousRate+Streak+Unemployment+HomeownershipRate+DemocraticPres+MonthsUntilElection,data=train)
str(train)
LogReg <- glm(RaisedFedFunds~PreviousRate+Streak+Unemployment+HomeownershipRate+DemocraticPres+MonthsUntilElection,data=train,family="binomial")
summary(LogReg)
str(fedFunds)
summary(LogReg)
a <- 9.121012-0.003427*1.7+0.157658*(-3)-0.047449*5.1-0.136451*65.3+0.347829*0-0.006931*18
1/(1+exp(-a))
str(fedFunds)
exp(0.34)
exp(0.3478)
test <- subset(fedFunds,spl==FALSE)
pred <- predict(LogReg,newdata=test,type="class")
pred <- predict(LogReg,newdata=test,type="response")
pred
summary(train$RaisedFedFunds)
table(test$RaisedFedFunds,pred)
str(pred)
pred
predbin <- pred>=0.5
predbin
predbin <- as.integer(predbin)
predbin
table(test$RaisedFedFunds,predbin)
summary(train$RaisedFedFunds)
library(ROCR)
ROCRpred = prediction(predbin, test$RaisedFedFunds)
as.numeric(performance(ROCRpred, "auc")@y.values)
ROCRpred = prediction(pred, test$RaisedFedFunds)
as.numeric(performance(ROCRpred, "auc")@y.values)
ROCRperf = performance(ROCRpred, "tpr", "fpr")
plot(ROCRperf)
plot(ROCRperf, colorize=TRUE)
set.seed(201)
library(caret)
tr.control = trainControl(method = "cv", number = 10)
cp.grid = expand.grid( .cp = (1:50)*0.001)
tr = train(RaisedFedFunds~PreviousRate+Streak+Unemployment+HomeownershipRate+DemocraticPres+MonthsUntilElection, data = train, method = "rpart", trControl = tr.control, tuneGrid = cp.grid)
tr
set.seed(201)
tr = train(RaisedFedFunds~PreviousRate+Streak+Unemployment+HomeownershipRate+DemocraticPres+MonthsUntilElection, data = train, method = "rpart", trControl = tr.control, tuneGrid = cp.grid)
tr$finalModel
tr
CART <- rpart(RaisedFedFunds~PreviousRate+Streak+Unemployment+HomeownershipRate+DemocraticPres+MonthsUntilElection, data = train,cp=0.016)
CART
prp(CART)
pred <- predict(CART,newdata=test)
pred
predbin <- pred>=0.5
table(test$RaisedFedFunds,predbin)
predbin
pred
pred <- pred[,2]
predbin <- pred>=0.5
table(test$RaisedFedFunds,predbin)
(64+48)/nrow(test)
Households <- read.csv("Households.csv")
summary(Households$MorningPct)
summary(Households$AfternoonPct)
table(Households$AfternoonPct)
table(Households$MorningPct)
truc <- Households
subset(truc,(MorningPct==0)&(AfternoonPct==0)
)
subset(truc,AfternoonPct==0)
subset(truc,MorningPct=100)
subset(truc,MorningPct==100)
subset(truc,AfternoonPct==100)
nrow(subset(truc,AfternoonPct==100))
sub <- subset(Households,AvgSalesValue>=150)
summary(sub)
sub1 <- subset(Households,AvgDiscount>=25)
summary(sub1)
sub2 <- subset(Households,NumVisits>=300)
summary(sub2)
nrow(sub2)
148/2500
summary(Households)
library(caret)
preproc = preProcess(Households)
HouseholdsNorm = predict(preproc, Households)
summary(HouseholdsNorm)
set.seed(200)
distances <- dist(HouseholdsNorm, method = "euclidean")
ClusterShoppers <- hclust(distances, method = "ward.D")
plot(ClusterShoppers, labels = FALSE)
set.seed(200)
KMC = kmeans(HouseholdsNorm, centers = 10, iter.max = 1000)
str(KMC)
Hhclust <- KMC$cluster
Hhmatrix <- as.matrix(Households)
dim(Hhclust)=c(nrow(Hhmatrix),ncol(Hhmatrix))
Hhmatrix <- as.matrix(HouseholdsNorm)
dim(Hhclust)=c(nrow(Hhmatrix),ncol(Hhmatrix))
healthy = read.csv("healthy.csv", header=FALSE)
healthyMatrix = as.matrix(healthy)
# Specify number of clusters
k = 5
# Run k-means
set.seed(1)
KMC = kmeans(healthyVector, centers = k, iter.max = 1000)
str(KMC)
# Extract clusters
healthyClusters = KMC$cluster
KMC$centers[2]
dim(healthyClusters) = c(nrow(healthyMatrix), ncol(healthyMatrix))
image(healthyClusters, axes = FALSE, col=rainbow(k))
dim(healthyClusters) = c(nrow(healthyMatrix), ncol(healthyMatrix))
mydata <- HouseholdsNorm
# K-Means Clustering with 5 clusters
fit <- kmeans(mydata, 10)
# Cluster Plot against 1st 2 principal components
# vary parameters for most readable graph
library(cluster)
clusplot(mydata, fit$cluster, color=TRUE, shade=TRUE,
labels=2, lines=0)
# Centroid Plot against 1st 2 discriminant functions
library(fpc)
plotcluster(mydata, fit$cluster)
fit
str(fit)
KMC
str(KMC)
KMC$centers
set.seed(200)
KMC <- kmeans(HouseholdsNorm,centers=10,iter.max=1000)
KMC$centers
KMC <- kmeans(HouseholdsNorm,centers=10,iter.max=1000)
KMC$centers
set.seed(5000)
KMC <- kmeans(HouseholdsNorm,centers=5,iter.max=1000)
KMC
str(KMC)
KMC$centers
L <- 1.3*3.84e26
sigma <- 5.67e-8
D <- 1.5e11
(L/(16*pi*sigma*D*D))^0.25
D <- 0.0527*1.5e11
(L/(16*pi*sigma*D*D))^0.25
L <- 3.84e26
D <- 10*1.5e11
(L/(16*pi*sigma*D*D))^0.25
